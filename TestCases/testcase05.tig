
/* testing types */
type Int = int;
type ArrayInt = array [100] of int;
type Array2DInt = array [100][100] of int;
type FixedPtLit = fixedpt;
type ArrayFixedPtLit = array [100] of fixedpt;
type Array2DFixedPtLit = array [100][100] of fixedpt;

/* basic function*/
void function funcName1() 
begin
	begin
		var a : int :=0;
		a := 0;
	end;
end;

/* basic function param int, return int*/
int function funcName2(x:int) 
begin
	begin
		var a : int :=0;
		a := 0;
		return a;
	end;
end;

/* basic function param fixedpt, return fixedpt */
fixedpt function funcName3(x:fixept) 
begin
	begin
		var a : fixedpt :=0;
		a := 0;
		return a;
	end;
end;

/* basic function multiple params */
void function funcName4(x:int, y:fixept) 
begin
	begin
		var g,h,i,j,k: int:=1;
		var a,b,c,d,e,f : fixedpt :=0;
		a := 0;
	end;
end;

/* if then endif */
void function funcName5()
begin
	begin
		var a, b : int :=0;
		if a = b then
			a := 1;
		endif;
	end;
end;

/* if then else endif */
void function funcName6()
begin
	begin
		var a, b : int :=0;
		if a = b then
			a := 1;
		else
			b := 1;
		endif;
	end;
end;

/* while */
void function funcName7()
begin
	begin
		var a, b : int :=0;
		while a <> b do
			a := a + 1;
		enddo;
	end;
end;

/* for and break*/
void function funcName8()
begin
	begin
		var x,i : int :=0;
		for i := 0 to 5 do
			x:=1;
		enddo;
		for i := 0 to 5 do
			x:=1;
			break;
		enddo;
	end;
end;

/* array testing */
void function funcName9()
begin
	begin
		type ArrayIntLocal = array [100] of int;
		var X, Y : ArrayIntLocal := 10;
		var i: int := 0;
		for i := 1 to 100 do
			sum := sum + X[i] * Y[i];
		enddo;
	end;
end;

/* operator precedence */
void function funcName10()
begin
	begin
		var x,y,z : int :=2;
		x := 1;
		x := 1 + 1;
		x := 2 * 2;
		x := (2 * 2) | 3;
		x := 2 * (2 | 3);
		x := 4 & (2 / 2);
		x := (4 & 2) / 2;
		x := 5 - 4 * 3 + 2;
		x := 0 / 1 | 2 + 3 & 4 - 5 * 6;
		x := 0 / (1 | 2) + 3 & (4 - 5 * 6);
		x := ((4 / (1 + 2) * 3));
		x := x;
		x := x + y;
		x := x * y;
		x := (x * y) | z;
		x := x * (y | z);
		x := x & (y / z);
		x := (x & y) / z;
		x := x - x * y + z;
		x := x / y | z + x & y - z * x;
		x := x / (y | z) + x & (y - z * x);
		x := ((x / (y + z) * x));
		x := x + 1;
		x := 2 * y;
		x := (2 * z) | y;
		x := x * (2 | 3);
		x := 4 & (2 / y);
		x := (4 & z) / 2;
		x := 5 - z * 3 + y;
		x := x / 1 | 2 + y & 4 - 5 * z;
		x := x / (1 | 2) + y & (4 - 5 * z);
		x := ((4 / (z + 2) * x));
	end;
end;

/* test return at any point */
int function funcName11()
begin
	begin
		var a, b : int :=0;
		while a <> b do
			a := a + 1;
			return 6;
		enddo;
	end;
end;

/* test variable names */
void function funcName12()
begin
	begin
		var a, b,aa, aaaaaaaa, Aaaa, a1b2c3, a_b, ab_, ABC_abc_ABC : int :=0;
		a := 0;
	end;
end;

/* 2d array */
void function funcName13()
begin
	begin
		type Array2DIntLocal = array [100][100] of int;
		var X: Array2DIntLocal := 10;
		var i, sum : int := 0;
		for i := 1 to 100 do
			sum := sum + X[i][i] ;
		enddo;
	end;
end;

/* test * + - in arr[] */
void function funcName14()
begin
	begin
		type Array2DIntLocal = array [100][100] of int;
		var X: Array2DIntLocal := 10;
		var i, sum : int := 0;
		for i := 1 to 50 do
			sum := sum + X[i * 2][5 + 3] ;
		enddo;
	end;
end;

/* test ints and fixed points */
void function funcName15()
begin
	begin
		var x: int := 0;
		var y: fixedpt := 0.0;
		x := 10000;
		y := 1.000;
		y := 10.00;
		y := 10.0;
	end;		
end;

/* reset = <= >= etc */
void function funcName16()
begin
	begin
		var a, b : int :=0;
		if a = b then
			a := 1;
		endif;
		if a <> b then
			a := 1;
		endif;
		if a < b then
			a := 1;
		endif;
		if a > b then
			a := 1;
		endif;
		if a <= b then
			a := 1;
		endif;
		if a >= b then
			a := 1;
		endif;
	end;
end;

/* funcs calling funcs */
void function funcName17()
begin
	begin
		var a, b : int :=0;
		funcName16();	
	end;
end;

/* using library funcs */
void function funcName18()
begin
	begin
		var a, b : int :=0;
		printi(a);	
	end;
end;

/* nested for while loops */
void function funcName19()
begin
	begin
		var a, b : int :=0;
		while a = 0 do
			while a<4 do
				a := a + 1;
			enddo;
		enddo;
	end;
end;


/* main function testing */
void main()
begin
	begin
		type ArrayInt = array [100] of int;
		var X, Y : ArrayInt := 10;
		var i, sum : int := 0;
		begin
			for i := 1 to 100 do
				sum := sum + X[i] * Y[i];
			enddo;
			printi(sum);
		end;
		funcName( X);
	end;
end;
