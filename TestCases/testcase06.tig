type Program = array [1024] of int;

/*
Virtual Machine Instructions
----------------------------
1 - mov x
2 - add x
3 - out
4 - in
5 - brz x
6 - br x
7 - halt
*/

Program function compile() begin begin
    /*Maximum loop nesting of 16 levels*/
    type Stack = array [16] of int;

    var c_ : string;
    var c : int;
    var i : int := 1;
    var program : Program;

    var loop_stack : Stack;
    var li : int := 1;

    c_ := getchar();
    c := ord(c);
    while c >= 0 & i <= 1024 - 2 do
        if c = 62 /*>*/ then
            program[i] := 1;
            program[i+1] := 1;
            i := i + 2;
        else if c = 60 /*<*/ then
            program[i] := 1;
            program[i+1] := 1-2;
            i := i + 2;
        else if c = 43 /*+*/ then
            program[i] := 2;
            program[i+1] := 1;
            i := i + 2;
        else if c = 45 /*-*/ then
            program[i] := 2;
            program[i+1] := 1-2;
            i := i + 2;
        else if c = 46 /*.*/ then
            program[i] := 3;
            i := i + 1;
        else if c = 44 /*,*/ then
            program[i] := 4;
            i := i + 1;
        else if c = 91 /*[*/ then
            program[i] := 5;
            loop_stack[li] := i;
            i := i + 2;
            li := li + 1;
            
            if li > 16 then
                /*TODO, error message*/
                exit(2-1);
            endif;
        else if c = 93 /*]*/ then
            if li = 1 then
                /*TODO, print error message*/
                exit(1-2);
            else
                li := li - 1;
                program[i] := 6;
                program[i+1] := loop_stack[li];
                
                c := loop_stack[li];
                program[c + 1] := i+2;
                i := i + 2;
            endif;
        else
            c := c; /* Do nothing*/
        endif; endif; endif; endif; endif; endif; endif; endif;

        /*Prepare for next iteration of loop.*/
        c_ := getchar();
        c := ord(c_);
    enddo;

    if li > 1 then
        /*Invalid state, unmatched brackets.*/
        /*TODO, print error message.*/
        exit(2-1);
    else
        program[i] := 7;
        return program;
    endif;
end; end;

void function execute(program : Program) begin begin
    type Memory = array [1024] of int;

    var ip : int := 1;
    var i : int;
    var temp : int;
    var str : string;

    var mp : int := 1;
    var mem : Memory;

    while 1 do
        i := program[ip];
        if i = 1 then
            temp := program[ip + 1];
            mp := mp + temp;
            /*TODO, overflow detection.*/
            ip := ip + 2;
        else if i = 2 then
            temp := program[ip + 1];
            mem[mp] := mem[mp] + temp;
            /*TODO, truncate*/
            ip := ip + 2;
        else if i = 3 then
            temp := mem[mp];
            str := chr(temp);
            print(str);
            ip := ip + 1;
        else if i = 4 then
            str := getchar();
            temp := ord(str);
            mem[mp] := temp;
            ip := ip + 1;
        else if i = 5 then
            temp := mem[mp];
            if temp then
                ip := ip + 2;
            else
                temp := program[ip + 1];
                ip := temp;
            endif;
        else if i = 6 then
            temp := program[ip + 1];
            ip := temp;
        else if i = 7 then
            break;
        endif; endif; endif; endif; endif; endif; endif;
    enddo;
end; end;

void main() begin begin
    var program : Program;

    program := compile();
    execute(program);
end; end;

